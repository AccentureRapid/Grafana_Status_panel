{"version":3,"sources":["../src/status_ctrl.js"],"names":["_","TimeSeries","MetricsPanelCtrl","StatusPluginCtrl","$scope","$injector","$log","annotationsSrv","log","debug","events","on","onRender","bind","postRefresh","onDataError","onDataReceived","onInitEditMode","measurements","filter","panel","targets","target","alias","hide","duplicates","each","m","res","measurement","length","addEditorTab","series","color","s","find","thresholds","dataList","map","seriesHandler","render","seriesData","datapoints","value","scope","elem","attrs","ctrl","$panelContainer","templateUrl"],"mappings":"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","file":"status_ctrl.js","sourcesContent":["import \"app/plugins/panel/graph/legend\";\nimport \"app/plugins/panel/graph/series_overrides_ctrl\";\nimport _ from \"lodash\";\nimport TimeSeries from \"app/core/time_series2\";\nimport {MetricsPanelCtrl} from \"app/plugins/sdk\";\n\nexport class StatusPluginCtrl extends MetricsPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, $log, annotationsSrv) {\n    super($scope, $injector);\n\n    this.log = $log.debug;\n\n    /** Bind events to functions **/\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('refresh', this.postRefresh.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  postRefresh() {\n    this.log(\"refresh\");\n\n    this.measurements = _.filter(this.panel.targets, (target) => {\n      return target.alias && !target.hide;\n    });\n\n    /** Duplicate alias validation **/\n    this.duplicates = false;\n\n    _.each(this.measurements, (m) => {\n      var res = _.filter(this.measurements, (measurement) => {\n        return m.alias == measurement.alias;\n      });\n\n      if (res.length > 1) {\n        this.duplicates = true;\n      }\n    });\n\n    // TODO: Remove temp test code\n    //if (this.status) {\n    //  this.$panelContainer.css('background-color', \"red\");\n    //} else {\n    //  this.$panelContainer.css('background-color', \"green\");\n    //}\n    //\n    //this.status = !this.status;\n  }\n\n  onInitEditMode() {\n    this.log(this);\n    this.addEditorTab('Options', 'public/plugins/status-panel/editor.html', 2);\n\n    this.log(this.panel.targets);\n  }\n\n  setUnitFormat() {\n    this.log(\"setUnitFormat\");\n  }\n\n  onDataError() {\n    this.log(\"onDataError\");\n  }\n\n  changeSeriesColor(series, color) {\n    this.log(\"changeSeriesColor\");\n  }\n\n  onRender() {\n    this.log(\"onRender\");\n\n    let targets = this.panel.targets;\n\n    _.each(this.series, (s) => {\n      let target = _.find(targets, (target) => {\n        return target.alias == s.alias;\n      });\n\n      if (target)\n        s.thresholds = target.thresholds;\n    });\n  }\n\n  parseSeries() {\n    this.log(\"parseSeries\");\n  }\n\n  onDataReceived(dataList) {\n    this.log(\"onDataReceived\");\n    this.series = dataList.map(this.seriesHandler.bind(this));\n\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    this.log(\"seriesHandler\");\n    this.log(seriesData);\n\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    //series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n    return series;\n  }\n\n  getDecimalsForValue(value) {\n    this.log(\"getDecimalsForValue\");\n  }\n\n  formatValue(value) {\n    this.log(\"formatValue\");\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.log(\"link\");\n    this.$panelContainer = elem.find('.panel-container');\n  }\n}\n\nStatusPluginCtrl.templateUrl = 'module.html';\n"]}